Index: config.json.example
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config.json.example	(revision 9ea015e1fd9c5d269276de8a8e822ee8eb0afa0f)
+++ config.json.example	(revision )
@@ -12,6 +12,6 @@
     "initial_transfer": 0,
     "location_cache": true,
     "distance_unit": "km",
-    "item_filter": "101,102,103,104",
+    "item_filter": "101:0,102:0,103:20,104:30,201:50,701:50",
     "evolve_all": "NONE"
 }
Index: pokemongo_bot/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pokemongo_bot/__init__.py	(revision 9ea015e1fd9c5d269276de8a8e822ee8eb0afa0f)
+++ pokemongo_bot/__init__.py	(revision )
@@ -410,15 +410,13 @@
                                     'inventory_items']:
                             #print('item {}'.format(item))
                             if 'inventory_item_data' in item:
-                                if 'pokemon_data' in item[
-                                        'inventory_item_data']:
+                                if 'pokemon' in what and 'pokemon_data' in item['inventory_item_data']:
                                     pokecount = pokecount + 1
-                                if 'item' in item['inventory_item_data']:
-                                    if 'count' in item['inventory_item_data'][
-                                            'item']:
-                                        itemcount = itemcount + \
-                                            item['inventory_item_data'][
-                                                'item']['count']
+                                if 'item' in what and 'item' in item['inventory_item_data']:
+                                    if 'count' in item['inventory_item_data']['item']:
+                                        itemcount = itemcount + item['inventory_item_data']['item']['count']
+                                        logger.log('[#] ' + self.item_list[str(item['inventory_item_data']['item']['item_id'])] + ' : ' + str(
+                                            item['inventory_item_data']['item']['count']))
         if 'pokemon' in what:
             return pokecount
         if 'item' in what:
Index: pokemongo_bot/cell_workers/seen_fort_worker.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pokemongo_bot/cell_workers/seen_fort_worker.py	(revision 9ea015e1fd9c5d269276de8a8e822ee8eb0afa0f)
+++ pokemongo_bot/cell_workers/seen_fort_worker.py	(revision )
@@ -29,7 +29,7 @@
                               longitude=lng)
         response_dict = self.api.call()
         if 'responses' in response_dict \
-                and'FORT_DETAILS' in response_dict['responses'] \
+            and 'FORT_DETAILS' in response_dict['responses'] \
                 and 'name' in response_dict['responses']['FORT_DETAILS']:
             fort_details = response_dict['responses']['FORT_DETAILS']
             fort_name = fort_details['name'].encode('utf8', 'replace')
@@ -70,13 +70,14 @@
                         item_name = self.item_list[str(item_id)]
 
                         logger.log("[+] " + str(item_count) +
-                                    "x " + item_name +
-                                    " (Total: " + str(self.bot.item_inventory_count(item_id)) + ")", 'green')
+                                   "x " + item_name +
+                                   " (Total: " + str(self.bot.item_inventory_count(item_id)) + ")", 'green')
 
                         # RECYCLING UNWANTED ITEMS
-                        if str(item_id) in self.config.item_filter:
+                        if int(item_id) in self.config.item_filter.keys() and \
+                                self.bot.item_inventory_count(item_id) > self.config.item_filter[int(item_id)]:
                             logger.log("[+] Recycling " + str(item_count) + "x " + item_name + "...", 'green')
-                            #RECYCLE_INVENTORY_ITEM
+                            # RECYCLE_INVENTORY_ITEM
                             response_dict_recycle = self.bot.drop_item(item_id=item_id, count=item_count)
 
                             if response_dict_recycle and \
@@ -84,10 +85,10 @@
                                 'RECYCLE_INVENTORY_ITEM' in response_dict_recycle['responses'] and \
                                     'result' in response_dict_recycle['responses']['RECYCLE_INVENTORY_ITEM']:
                                 result = response_dict_recycle['responses']['RECYCLE_INVENTORY_ITEM']['result']
-                            if result is 1: # Request success
+                                if result is 1:  # Request success
-                                logger.log("[+] Recycling success", 'green')
-                            else:
-                                logger.log("[+] Recycling failed!", 'red')
+                                    logger.log("[+] Recycling success", 'green')
+                                else:
+                                    logger.log("[+] Recycling failed!", 'red')
                 else:
                     logger.log("[#] Nothing found.", 'yellow')
 
@@ -119,7 +120,24 @@
                         format_time((pokestop_cooldown / 1000) -
                                     seconds_since_epoch)))
             elif spin_details['result'] == 4:
-                print_red("[#] Inventory is full, switching to catch mode...")
+                print_red("[#] Inventory is full, trying to drop some elements...")
+                # RECYCLING UNWANTED ITEMS
+                for item_key in self.config.item_filter.keys():
+                    item_count = self.bot.item_inventory_count(item_key)
+                    if item_count > self.config.item_filter[int(item_key)]:
+                        items_to_remove = item_count - self.config.item_filter[int(item_key)]
+                        response_dict_recycle = self.bot.drop_item(item_id=int(item_key), count=items_to_remove)
+                        if response_dict_recycle and \
+                                        'responses' in response_dict_recycle and \
+                                        'RECYCLE_INVENTORY_ITEM' in response_dict_recycle['responses'] and \
+                                        'result' in response_dict_recycle['responses']['RECYCLE_INVENTORY_ITEM']:
+                            result = response_dict_recycle['responses']['RECYCLE_INVENTORY_ITEM']['result']
+                            if result is 1:  # Request success
+                                logger.log("[+] Recycling success", 'green')
+                                logger.log("[+] Removed "+str(items_to_remove)+"x "+self.item_list[str(item_key)], 'green')
+                            else:
+                                logger.log("[+] Recycling failed!", 'red')
+                print_red("[#] Switching to catch mode...")
                 self.config.mode = 'poke'
 
             if 'chain_hack_sequence_number' in response_dict['responses'][
Index: pokecli.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pokecli.py	(revision 9ea015e1fd9c5d269276de8a8e822ee8eb0afa0f)
+++ pokecli.py	(revision )
@@ -166,7 +166,11 @@
         return None
 
     if config.item_filter:
-        config.item_filter = [str(item_id) for item_id in config.item_filter.split(',')]
+        item_filter = {}
+        for filterer in config.item_filter.split(','):
+            filter_spec = filterer.split(':')
+            item_filter[int(filter_spec[0])] = int(filter_spec[1])
+        config.item_filter = item_filter
 
     config.release_config = {}
     if os.path.isfile(release_config_json):
